{"version":3,"sources":["Canvas.js","App.js","serviceWorker.js","index.js"],"names":["UrlImage","src","useImage","image","x","y","width","window","innerWidth","height","innerHeight","MyRect","args","addMouseEvents","document","addEventListener","onMouseDown","onMouseMove","onMouseUp","removeMouseEvents","removeEventListener","e","setState","drag","startX","pageX","startY","pageY","state","prevState","endX","endY","obj","w","h","rectData","onUndo","slice","onLoadImage","srcImage","prompt","alert","onRestore","localStorage","getItem","JSON","parse","color","this","map","data","key","fill","shadowBlur","className","onClick","setItem","stringify","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd6b9176.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layer, Rect, Stage, Image } from 'react-konva';\r\nimport useImage from 'use-image';\r\nimport './Canvas.css';\r\n\r\nconst UrlImage = ({ src }) => {\r\n  const [image] = useImage(src);\r\n  return (\r\n    <Image\r\n      image={image}\r\n      x={100}\r\n      y={100}\r\n      width={window.innerWidth / 1.5}\r\n      height={window.innerHeight / 1.5}\r\n    />\r\n  );\r\n};\r\n\r\nclass MyRect extends React.Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.state = {\r\n      color: 'green',\r\n      rectData: [],\r\n      startX: 0,\r\n      startY: 0,\r\n      endX: 0,\r\n      endY: 0,\r\n      drag: false,\r\n      srcImage: '',\r\n    };\r\n  }\r\n\r\n  addMouseEvents = () => {\r\n    document.addEventListener('mousedown', this.onMouseDown, false);\r\n    document.addEventListener('mousemove', this.onMouseMove, false);\r\n    document.addEventListener('mouseup', this.onMouseUp, false);\r\n  };\r\n  removeMouseEvents = () => {\r\n    document.removeEventListener('mousedown', this.onMouseDown, false);\r\n    document.removeEventListener('mousemove', this.onMouseMove, false);\r\n    document.removeEventListener('mouseup', this.onMouseUp, false);\r\n  };\r\n\r\n  onMouseDown = (e) => {\r\n    this.setState({\r\n      drag: true,\r\n      startX: e.pageX,\r\n      startY: e.pageY,\r\n    });\r\n  };\r\n\r\n  onMouseMove = (e) => {\r\n    if (this.state.drag) {\r\n      this.setState((prevState) => ({\r\n        endX: e.pageX - prevState.startX,\r\n        endY: e.pageY - prevState.startY,\r\n      }));\r\n    }\r\n  };\r\n\r\n  onMouseUp = (e) => {\r\n    let obj = {};\r\n    obj.x = this.state.startX;\r\n    obj.y = this.state.startY;\r\n    obj.w = this.state.endX;\r\n    obj.h = this.state.endY;\r\n    this.setState((prevState) => ({\r\n      rectData: [...prevState.rectData, obj],\r\n      startX: 0,\r\n      startY: 0,\r\n      endX: 0,\r\n      endY: 0,\r\n      drag: false,\r\n    }));\r\n  };\r\n\r\n  onUndo = () => {\r\n    let arrNew = this.state.rectData;\r\n    let rectData = arrNew.slice(0, -2);\r\n    this.setState({\r\n      rectData,\r\n    });\r\n  };\r\n\r\n  onLoadImage = () => {\r\n    let srcImage = prompt(\r\n      'Please enter the image url:',\r\n      'https://dummyimage.com/600x400/000/fff'\r\n    );\r\n    // eslint-disable-next-line eqeqeq\r\n    if (srcImage == null || srcImage == '') {\r\n      alert('Image not added!');\r\n    } else {\r\n      this.setState({\r\n        srcImage,\r\n      });\r\n    }\r\n  };\r\n\r\n  onRestore = () => {\r\n    let rectData = localStorage.getItem('rectData');\r\n    let srcImage = localStorage.getItem('srcImage');\r\n    if (rectData) {\r\n      this.setState({\r\n        rectData: JSON.parse(rectData),\r\n        srcImage: '',\r\n      });\r\n    }\r\n    if (srcImage) {\r\n      this.setState({\r\n        srcImage,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.addMouseEvents();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.removeMouseEvents();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Stage width={window.innerWidth} height={window.innerHeight}>\r\n          <Layer>\r\n            <UrlImage src={this.state.srcImage} />\r\n            {this.state.rectData &&\r\n              this.state.rectData.map((data, key) => (\r\n                <Rect\r\n                  key={key}\r\n                  x={data.x}\r\n                  y={data.y}\r\n                  width={data.w}\r\n                  height={data.h}\r\n                  fill={this.state.color}\r\n                  shadowBlur={10}\r\n                />\r\n              ))}\r\n            {this.state.drag && (\r\n              <Rect\r\n                x={this.state.startX}\r\n                y={this.state.startY}\r\n                width={this.state.endX}\r\n                height={this.state.endY}\r\n                fill={this.state.color}\r\n                shadowBlur={10}\r\n              />\r\n            )}\r\n          </Layer>\r\n        </Stage>\r\n        <div className='fixed-button'>\r\n          <div className='bottom-button'>\r\n            <button\r\n              onClick={() => this.setState({ rectData: [], srcImage: '' })}\r\n            >\r\n              Clear\r\n            </button>\r\n            <button onClick={() => this.onUndo()}>Undo Rectangle</button>\r\n            <button onClick={() => this.onLoadImage()}>Load Image</button>\r\n            <button onClick={() => this.onRestore()}>Restore Previous</button>\r\n            <button\r\n              onClick={() => {\r\n                localStorage.setItem(\r\n                  'rectData',\r\n                  JSON.stringify(this.state.rectData)\r\n                );\r\n                localStorage.setItem('srcImage', this.state.srcImage);\r\n                alert('Saved');\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyRect;\r\n","import React from 'react';\nimport './App.css';\nimport Canvas from './Canvas';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <div className='header'>\n        <h2 className='text-color-gray align-center'>Sketch on Image</h2>\n      </div>\n      <Canvas />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}